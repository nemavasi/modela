MODULE WeightedQuickUnionUF;

(* For additional documentation, see <a href="http://algs4.cs.princeton.edu/15uf">Section 1.5</a> of
 *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne. 
Это структура данных, которая позволяет быстрее отвечать на вопрос соединены ли 
элементы между собой - например, являются ли 2 человека друзьями в социальной сети *)

 CONST 
   N* = 20;
   NN* = N * N + 2;  (* число ячеек + 1 top + 1 bottom *)

 VAR 
  count* : INTEGER;
  parent, size : ARRAY NN OF INTEGER;   

 PROCEDURE Init*;
 VAR 
  i : INTEGER;
 BEGIN
   count := NN;
   FOR i:= 0 TO NN-1 DO
     parent[i] := i;
     size[i] := i;
   END;
 END Init; 

 PROCEDURE Find*(p : INTEGER) : INTEGER; 
 BEGIN
   ASSERT((p >= 0) & (p < NN));
   WHILE (p # parent[p]) DO 
     p := parent[p];
   END;
   RETURN p
 END Find;

 PROCEDURE Connected*(p, q : INTEGER) : BOOLEAN; 
 BEGIN
   RETURN Find(p) = Find(q) 
 END Connected;

 PROCEDURE Union*(p, q : INTEGER);
  VAR 
    rootP, rootQ : INTEGER;
 BEGIN 
   rootP := Find(p);
   rootQ := Find(q);
   IF p # q THEN
     IF size[rootP] < size[rootQ] THEN
       parent[rootP] := rootQ;
       size[rootQ] := size[rootQ] + size[rootP];
     ELSE
       parent[rootQ] := rootP;
       size[rootP] := size[rootP] + size[rootQ];
     END;
     count := count - 1;
   END; 
   
 END Union;
 
BEGIN
 Init;
END WeightedQuickUnionUF.

(* *  Copyright 2002-2015, Robert Sedgewick and Kevin Wayne.
 *
 *  This file is part of algs4.jar, which accompanies the textbook
 *
 *      Algorithms, 4th edition by Robert Sedgewick and Kevin Wayne,
 *      Addison-Wesley Professional, 2011, ISBN 0-321-57351-X.
 *      http://algs4.cs.princeton.edu
 *
 *
 *  algs4.jar is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  algs4.jar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with algs4.jar.  If not, see http://www.gnu.org/licenses. *)
 
 MODULE Table;
 (* Модель данных для процедуры перколяции *)
 IMPORT WeightedQuickUnionUF;

 CONST 
   CLOSED* = 0;
   OPENED* = 1;
   FILLED* = 2;
   N* = WeightedQuickUnionUF.N; (* размер стороны квадрата *)

 VAR 
   cells* : ARRAY N, N OF BYTE;

 PROCEDURE Clear*;
 VAR i, j : INTEGER;
 BEGIN
   FOR i := 0 TO N - 1 DO
     FOR j := 0 TO N - 1 DO
       cells[i, j] := CLOSED; 
     END;     
   END;
   WeightedQuickUnionUF.Init;
 END Clear;

 PROCEDURE Get*(x,y : INTEGER) : BYTE;
 BEGIN
   RETURN cells[x-1][y-1]
 END Get;

 PROCEDURE Open*(x, y : INTEGER);
 BEGIN
   cells[x-1][y-1] := OPENED;
 END Open;

 PROCEDURE Fill*(x, y : INTEGER);
 BEGIN
   cells[x-1][y-1] := FILLED;
 END Fill; 

 PROCEDURE IsOnlyOpened*(x, y : INTEGER) : BOOLEAN;
 VAR
   result : BOOLEAN;
 BEGIN
   IF ((x-1) < 0) OR ((x-1) > N-1) THEN
     result := FALSE;
   ELSIF ((y-1) < 0) OR ((y-1) > N-1) THEN
     result := FALSE;
   ELSIF (cells[x-1][y-1] = OPENED) THEN
     result := TRUE;
   ELSE 
     result := FALSE;
   END;
   RETURN result
 END IsOnlyOpened; 

 PROCEDURE IsFilled*(x, y : INTEGER) : BOOLEAN;
 VAR
   result : BOOLEAN;
 BEGIN
   IF ((x-1) < 0) OR ((x-1) > N-1) THEN
     result := FALSE;
   ELSIF ((y-1) < 0) OR ((y-1) > N-1) THEN
     result := FALSE;
   ELSIF (cells[x-1][y-1] = FILLED) THEN
     result := TRUE;
   ELSE 
     result := FALSE;
   END;
   RETURN result
 END IsFilled; 

 PROCEDURE FillCellFrom*(x, y : INTEGER);
 BEGIN
   IF ~ 
      (
        ((x-1) < 0)
        OR ((x-1) > N-1)  
        OR ((y-1) < 0) 
        OR ((y-1) > N-1) 
        OR (cells[x-1][y-1] = CLOSED)
      )
   THEN 
     (* заполняемся *)
     IF IsFilled(x-1, y) THEN 
       Fill(x,y);
     ELSIF IsFilled(x+1, y) THEN 
       Fill(x,y);
     ELSIF IsFilled(x, y-1) THEN 
       Fill(x,y);
     ELSIF IsFilled(x, y+1) THEN 
       Fill(x,y); 
     END;
      
     IF IsFilled(x, y) THEN 
       IF IsOnlyOpened(x - 1, y) THEN
         Fill(x-1,y);
         FillCellFrom(x-1, y);
       END;
       IF IsOnlyOpened(x + 1, y) THEN 
         Fill(x+1,y);
         FillCellFrom(x+1, y);
       END;
       IF IsOnlyOpened(x, y-1) THEN 
         Fill(x,y-1);
         FillCellFrom(x, y-1);
       END;
       IF IsOnlyOpened(x, y+1) THEN 
         Fill(x,y+1);
         FillCellFrom(x, y+1);
       END;         
     END; 
   END;
 END FillCellFrom;  

END Table.

(*
    Copyright (C) 2019  Dmitry Shalygin

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*)
MODULE Percolation;
 (* Модель, объединяющая структуру данных для поиска и модель данных перколяции *)
 IMPORT Quf := WeightedQuickUnionUF, Table := Table;

 CONST 
   N* = Quf.N;
   CLOSED* = Table.CLOSED;
   OPENED* = Table.OPENED;
   FILLED* = Table.FILLED;

 VAR 
   nTop : INTEGER;
   nBottom : INTEGER;   
   
 PROCEDURE Percolates*() : BOOLEAN;
 BEGIN
   RETURN Quf.Connected(nTop, nBottom)
 END Percolates;  

 PROCEDURE Clear*;
 VAR i, j : INTEGER;
 BEGIN
   Table.Clear;
 END Clear;

 PROCEDURE IsOpen*(i, j : INTEGER) : BOOLEAN; 
 BEGIN
   ASSERT(i >= 1);
   ASSERT(i <= N);
   ASSERT(j >= 1);
   ASSERT(j <= N);
   RETURN (Table.Get(i,j)=Table.OPENED) OR (Table.Get(i,j) = Table.FILLED)
 END IsOpen;

 PROCEDURE IsFull*(i, j : INTEGER) : BOOLEAN;
 VAR result : BOOLEAN;
 BEGIN
   ASSERT(i >= 1);
   ASSERT(i <= N);
   ASSERT(j >= 1);
   ASSERT(j <= N);
   IF ~(IsOpen(i, j)) THEN 
     result := FALSE;
   ELSE
     result := Table.Get(i,j) = Table.FILLED;
   END;
   RETURN result
 END IsFull; 

 PROCEDURE Open*(i, j : INTEGER); 
 VAR nom1, nom2, a1, a2, a3, a4, b1, b2, b3, b4 : INTEGER; 
 BEGIN
   ASSERT(i >= 1);
   ASSERT(i <= N);
   ASSERT(j >= 1);
   ASSERT(j <= N); 
   IF Table.Get(i,j) = Table.CLOSED THEN 
     Table.Open(i,j);
     nom1 := (i-1) * N + (j-1);     
     IF i = 1 THEN
       Quf.Union(nTop, nom1);
       Table.Fill(i,j);
     END; 
     IF i = N THEN
       Quf.Union(nBottom, nom1);
     END;   
     (* соседи *)
     a1 := i - 1;
     b1 := j;
     a2 := i;
     b2 := j + 1;
     a3 := i + 1;
     b3 := j;
     a4 := i;
     b4 := j - 1;
     nom2 := 0;
     IF ((a1 > 0) & (a1 <= N)) & ((b1 > 0) & (b1 <= N)) THEN
       nom2 := (a1-1) * N + b1-1;
       IF IsOpen(a1, b1) THEN 
         Quf.Union(nom1, nom2);
       END;
     END;
     IF ((a2 > 0) & (a2 <= N)) & ((b2 > 0) & (b2 <= N)) THEN 
       nom2 := (a2-1) * N + b2-1;
       IF (IsOpen(a2, b2)) THEN
         Quf.Union(nom1, nom2);
       END;
     END;
     IF ((a3 > 0) & (a3 <= N)) & ((b3 > 0) & (b3 <= N)) THEN
       nom2 := (a3-1) * N + b3-1;
       IF (IsOpen(a3, b3)) THEN
         Quf.Union(nom1, nom2);
       END;
     END;     
     IF ((a4 > 0) & (a4 <= N)) & ((b4 > 0) & (b4 <= N)) THEN
       nom2 := (a4-1) * N + b4-1;
       IF (IsOpen(a4, b4)) THEN
         Quf.Union(nom1, nom2);
       END;
     END;
     Table.FillCellFrom(i, j);    
   END; 
 END Open;

BEGIN
 ASSERT(N > 0);
 nTop := N * N;
 nBottom := N * N + 1; 
 
END Percolation.

(*
    Copyright (C) 2019  Dmitry Shalygin

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*)

MODULE Init;
 IMPORT D := Draw, Strings, Perc := Percolation, Math;

 CONST
  N = Perc.N;
  CLOSED = Perc.CLOSED;
  OPENED = Perc.OPENED;
  FILLED = Perc.FILLED;
  rows = N; cols = N; size = N; (* размеры поля *)
  width = rows * size + 1; height = cols * size + 30 + 1; (* размеры холста *)
  bX = 1.0; bH = 24.0; bY = FLT(height) - bH - 1.0; bW = 80.0;  (* кнопка старт *) 
  
 VAR
  a : ARRAY rows, cols OF BYTE; (* поле *)
  run: BOOLEAN; 
  n: INTEGER;   (* доля открытых ячеек *)

 PROCEDURE Setup;
 BEGIN
  D.SetSize(width, height);
  D.SetFrameRate(20)
 END Setup;

 PROCEDURE IsOver(): BOOLEAN;
 BEGIN
  RETURN D.focus & (D.mouseX > bX) & (D.mouseX < bX + bW) & (D.mouseY > bY) & (D.mouseY < bY + bH)
 END IsOver;

 PROCEDURE Clear*;
 VAR i, j : INTEGER;
 BEGIN
   n := 0;
   Perc.Clear;
 END Clear;
 
 PROCEDURE RandomFillWhileNotPercolation;
 VAR i, j :  INTEGER; 
 BEGIN   
   (* открываем клетки пока не просочится *)
   WHILE ~Perc.Percolates() DO
     i := 1 + FLOOR(FLT(N) * Math.Rnd());
     j := 1 + FLOOR(FLT(N) * Math.Rnd());
     Perc.Open(i, j);
   END; 
   (* Передаем данные с модели на экран.
      Обратите внимание, что в модели первая координата - это столбец,
      поэтому надо координаты поменять местами      
    *)
   FOR i := 1 TO N DO
     FOR j := 1 TO N DO 
       IF Perc.IsFull(i, j) THEN 
         a[j - 1, i - 1] := FILLED;
       ELSIF Perc.IsOpen(i, j) THEN 
         a[j - 1, i - 1] := OPENED;
       ELSE
         a[j - 1, i - 1] := CLOSED;
       END;
     END;
   END;   
   (* подсчет доли открытых ячеек *)
   FOR i := 1 TO N DO
     FOR j := 1 TO N DO 
       IF Perc.IsFull(i, j) OR Perc.IsOpen(i, j) THEN 
        n := n + 1;       
       END;
     END;
   END; 
   n := (100 * n) DIV (N*N);
 END RandomFillWhileNotPercolation;

 PROCEDURE Released;
 BEGIN
   IF IsOver() THEN
     Clear;
     RandomFillWhileNotPercolation; 
   END;
 END Released;

 PROCEDURE Plot;
 VAR i, j: INTEGER; str: ARRAY 9 OF CHAR;
 BEGIN
  (* рисуем клетки *)
  D.SetBackground(255H);
  D.NoStroke; 
  FOR i := 0 TO rows - 1 DO
   	FOR j := 0 TO cols - 1 DO
     IF a[i, j] = FILLED THEN 
       D.Fill(0FF4444FFH);
       D.Recti(i * size, j * size, size, size)
     ELSIF a[i, j] = CLOSED THEN
       D.Fill(0H); 
       D.Recti(i * size, j * size, size, size)
     ELSE 
       D.Fill(255H); 
       D.Recti(i * size, j * size, size, size)
     END
    END
  END; 
  (* рисуем решетку *) 
  D.Stroke(0H); D.StrokeWidth(1);
  FOR i:= 0 TO rows DO D.Linei(0, i * size, width, i * size) END;
  FOR i:= 0 TO cols DO D.Linei(i * size, 0, i * size, cols * size) END; 
  (* рисуем кнопку *)
  IF IsOver() THEN D.Fill(0FFAAAAAAH) ELSE D.NoFill END;
  D.RectRounded(bX, bY, bW, bH, 5.0);
  D.Fill(0H);
  D.Stringi("Старт", FLOOR(bX) + 17, FLOOR(bY + bH) - 6, 16);  
  (* рисуем счетчик *)
  Strings.IntToString(n, str);
  str[2] := "%";
  D.Stringi(str, width - 100, FLOOR(bY + bH) - 6, 16)
 END Plot;

BEGIN

 (* инициализация графики *)
 D.CreateCanvas("canvas");
 D.SetSetupProc(Setup);
 D.SetDrawProc(Plot);
 D.SetReleasedProc(Released);
 D.Start
END Init.

(*
    Copyright (C) 2019  Dmitry Shalygin

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*)
